{
	"info": {
		"_postman_id": "e279bf24-4828-45cf-9c0e-2df99fbec720",
		"name": "Parcial2Colection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25565466"
	},
	"item": [
		{
			"name": "Bonos",
			"item": [
				{
					"name": "Crear Bono",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains 'monto'\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('monto', 1000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"monto\": 1000,\n  \"calificacion\": 4.0,\n  \"palabraClave\": \"Super bono\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/bonos",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bonos"
							]
						}
					},
					"response": [
						{
							"name": "Crear Bono",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"monto\": 1000,\n  \"calificacion\": 4.0,\n  \"palabraClave\": \"Super bono\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/bonos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bonos"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 1,\n  \"monto\": 1000,\n  \"calificacion\": 4.0,\n  \"palabraClave\": \"clave123\",\n  \"usuario\": null\n}"
						}
					]
				},
				{
					"name": "Crear Bono invalido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error message matches\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"El monto del bono debe ser mayor a 0\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"monto\": -100,\n  \"calificacion\": 4.0,\n  \"palabraClave\": \"clave123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/bonos",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bonos"
							]
						}
					},
					"response": [
						{
							"name": "Crear Bono invalido",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"monto\": -100,\n  \"calificacion\": 4.0,\n  \"palabraClave\": \"clave123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/bonos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bonos"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n  \"statusCode\": 400,\n  \"message\": \"El monto del bono debe ser mayor a 0\",\n  \"error\": \"Bad Request\"\n}"
						}
					]
				},
				{
					"name": "Obtener Bono por ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains the expected ID\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(1);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/bonos/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bonos",
								"1"
							]
						}
					},
					"response": [
						{
							"name": "Obtener Bono por ID",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/bonos/1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bonos",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 1,\n  \"monto\": 1000,\n  \"calificacion\": 4.0,\n  \"palabraClave\": \"clave123\",\n  \"usuario\": null\n}"
						}
					]
				},
				{
					"name": "Obtener Bono con ID invalido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error message matches\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Bono con el id indicado no fue encontrado\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/bonos/999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bonos",
								"999"
							]
						}
					},
					"response": [
						{
							"name": "Obtener Bono con ID invalido",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/bonos/000090000000000000000000000000000000",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bonos",
										"000090000000000000000000000000000000"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n  \"statusCode\": 404,\n  \"message\": \"Bono con el id indicado no fue encontrado\",\n  \"error\": \"Not Found\"\n}"
						}
					]
				},
				{
					"name": "Obtener Bonos por Usuario",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Number of bonuses > 0\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.be.greaterThan(0);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/bonos/usuario/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bonos",
								"usuario",
								"1"
							]
						}
					},
					"response": [
						{
							"name": "Obtener Bonos por Usuario",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/bonos/usuario/1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bonos",
										"usuario",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": 1,\n    \"monto\": 1000,\n    \"calificacion\": 4.0,\n    \"palabraClave\": \"clave123\",\n    \"usuario\": 1\n  }\n]"
						}
					]
				},
				{
					"name": "Obtener Bonos de Usuario invalido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error message matches\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Usuario con el id indicado no fue encontrado\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/bonos/999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bonos",
								"999"
							]
						}
					},
					"response": [
						{
							"name": "Obtener Bonos de Usuario invalido",
							"originalRequest": {
								"method": "GET",
								"header": []
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n  \"statusCode\": 404,\n  \"message\": \"Usuario con el id indicado no fue encontrado\",\n  \"error\": \"Not Found\"\n}"
						}
					]
				},
				{
					"name": "Eliminar Bono",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/bonos/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bonos",
								"1"
							]
						}
					},
					"response": [
						{
							"name": "Eliminar Bono",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/bonos/1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bonos",
										"1"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Eliminar Bono invalido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error message matches\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Bono con el id indicado no fue encontrado\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/bonos/999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bonos",
								"999"
							]
						}
					},
					"response": [
						{
							"name": "Eliminar Bono invalido",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/bonos/000090000000000000000000000000000000",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bonos",
										"000090000000000000000000000000000000"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n  \"statusCode\": 404,\n  \"message\": \"Bono con el id indicado no fue encontrado\",\n  \"error\": \"Not Found\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "Clases",
			"item": [
				{
					"name": "Crear Clase",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains 'codigo'\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('codigo', 'MAT1234567');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"nombre\": \"Matemáticas\",\n  \"codigo\": \"MAT1234567\",\n  \"numeroCreditos\": 3\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/clases",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"clases"
							]
						}
					},
					"response": [
						{
							"name": "Crear Clase",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nombre\": \"Matemáticas\",\n  \"codigo\": \"MAT1234567\",\n  \"numeroCreditos\": 3\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/clases",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"clases"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 1,\n  \"nombre\": \"Matemáticas\",\n  \"codigo\": \"MAT1234567\",\n  \"numeroCreditos\": 3\n}"
						}
					]
				},
				{
					"name": "Crear Clase con codigo invalido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error message matches\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"El código debe tener 10 caracteres\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"nombre\": \"Matemáticas\",\n  \"codigo\": \"MAT1234\", // Código con menos de 10 caracteres\n  \"numeroCreditos\": 3\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/clases",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"clases"
							]
						}
					},
					"response": [
						{
							"name": "Crear Clase con codigo invalido",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nombre\": \"Matemáticas\",\n  \"codigo\": \"MAT1234\", // Código con menos de 10 caracteres\n  \"numeroCreditos\": 3\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/bonos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bonos"
									]
								}
							},
							"code": 400,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": "{\n  \"statusCode\": 400,\n  \"message\": \"El código debe tener 10 caracteres\",\n  \"error\": \"Bad Request\"\n}"
						}
					]
				},
				{
					"name": "Obtener Clase por ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains the expected ID\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(1);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/clases/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"clases",
								"1"
							]
						}
					},
					"response": [
						{
							"name": "Obtener Clase por ID",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/clases/1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"clases",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 1,\n  \"nombre\": \"Matemáticas\",\n  \"codigo\": \"MAT1234567\",\n  \"numeroCreditos\": 3,\n  \"usuario\": null,\n  \"bonos\": []\n}"
						}
					]
				},
				{
					"name": "Obtener Clase por ID invalido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error message matches\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Clase no encontrada\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/clases/999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"clases",
								"999"
							]
						}
					},
					"response": [
						{
							"name": "Obtener Clase por ID invalido",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/clases/900090900",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"clases",
										"900090900"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n  \"statusCode\": 404,\n  \"message\": \"Clase no encontrada\",\n  \"error\": \"Not Found\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "Usuarios",
			"item": [
				{
					"name": "Crear Usuario",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains 'numeroCedula'\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('numeroCedula', 12345678);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"numeroCedula\": 12345678,\n  \"nombre\": \"Juan Pérez\",\n  \"grupoInvestigacion\": \"TICSW\",\n  \"numeroExtension\": 87654321,\n  \"rol\": \"Profesor\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": [
						{
							"name": "Crear Usuario",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"numeroCedula\": 12345678,\n  \"nombre\": \"Juan Pérez\",\n  \"grupoInvestigacion\": \"TICSW\",\n  \"numeroExtension\": 87654321,\n  \"rol\": \"Profesor\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 1,\n  \"numeroCedula\": 12345678,\n  \"nombre\": \"Juan Pérez\",\n  \"grupoInvestigacion\": \"TICSW\",\n  \"numeroExtension\": 87654321,\n  \"rol\": \"Profesor\"\n}"
						}
					]
				},
				{
					"name": "Crear Usuario con grupoInvestigacion invalido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error message matches\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Grupo de investigacion invalido\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"numeroCedula\": 12345678,\n  \"nombre\": \"Juan Pérez\",\n  \"grupoInvestigacion\": \"Desconocido\",\n  \"numeroExtension\": 87654321,\n  \"rol\": \"Profesor\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": [
						{
							"name": "Crear Usuario con grupoInvestigacion invalido",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"numeroCedula\": 12345678,\n  \"nombre\": \"Juan Pérez\",\n  \"grupoInvestigacion\": \"Desconocido\",\n  \"numeroExtension\": 87654321,\n  \"rol\": \"Profesor\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n  \"statusCode\": 400,\n  \"message\": \"Grupo de investigacion invalido\",\n  \"error\": \"Bad Request\"\n}"
						}
					]
				},
				{
					"name": "Obtener Usuario por ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains the expected ID\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(1);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/usuarios/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios",
								"1"
							]
						}
					},
					"response": [
						{
							"name": "Obtener Usuario por ID",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/usuarios/1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 1,\n  \"numeroCedula\": 12345678,\n  \"nombre\": \"Juan Pérez\",\n  \"grupoInvestigacion\": \"TICSW\",\n  \"numeroExtension\": 87654321,\n  \"rol\": \"Profesor\",\n  \"bonos\": [],\n  \"clases\": []\n}"
						}
					]
				},
				{
					"name": "Obtener Usuario con ID invalido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error message matches\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Usuario con el id indicado no fue encontrado\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/usuarios/999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios",
								"999"
							]
						}
					},
					"response": [
						{
							"name": "Obtener Usuario con ID invalido",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/usuarios/900009090909009",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios",
										"900009090909009"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n  \"statusCode\": 404,\n  \"message\": \"Usuario con el id indicado no fue encontrado\",\n  \"error\": \"Not Found\"\n}"
						}
					]
				},
				{
					"name": "Eliminar Usuario",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/usuarios/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios",
								"1"
							]
						}
					},
					"response": [
						{
							"name": "Eliminar Usuario",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/usuarios/1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios",
										"1"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Eliminar Usuario con ID invalido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error message matches\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Usuario with id 999 not found\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/usuarios/999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios",
								"999"
							]
						}
					},
					"response": [
						{
							"name": "Eliminar Usuario con ID invalido",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/usuarios/900009090909009",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios",
										"900009090909009"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n  \"statusCode\": 404,\n  \"message\": \"Usuario with id 999 not found\",\n  \"error\": \"Not Found\"\n}"
						}
					]
				}
			]
		}
	]
}